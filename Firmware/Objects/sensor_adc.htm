<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\sensor_adc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\sensor_adc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 11 18:09:51 2025
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; sensor_resistive_measure &rArr; time_constant_estimate &rArr; matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">ADC_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[12]">EXT_GPIO10_ACTIVELOW</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[8]">EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[10]">EXT_GPIO8_ACTIVEHIGH_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[11]">EXT_GPIO9_ACTIVELOW_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[9]">EXT_OPTICAL_IRQ_IN_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[f]">OPTICAL_SFD_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[e]">RAWCHIPS_32_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[d]">RAWCHIPS_STARTVAL_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[c]">RFTIMER_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[b]">RF_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[7]">UART_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from cm0dsasm.o(.text)
 <LI><a href="#[1c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[19]">cb_endFrame_rx_radio</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[17]">cb_endFrame_tx_radio</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[18]">cb_startFrame_rx_radio</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[16]">cb_startFrame_tx_radio</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[15]">cb_timer_radio</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[1a]">default_radio_rx_cb</a> from radio.o(.text) referenced from radio.o(.text)
 <LI><a href="#[1b]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[13]">rftimer_callback</a> from sensor_adc.o(.text) referenced from sensor_adc.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[157]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[158]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[14b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[24]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[25]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[26]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[28]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[29]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[2b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[159]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[160]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[161]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[162]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[166]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[168]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[169]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[174]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[175]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[176]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[31]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sensor_resistive_measure &rArr; time_constant_estimate &rArr; matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[177]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[155]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[178]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[36]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_asc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_TX_channel_table
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sensor_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = main &rArr; sensor_resistive_measure &rArr; time_constant_estimate &rArr; matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_set_callback_by_id
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts_by_id
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_interrupt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cm0dsasm.o(.text))

<P><STRONG><a name="[7]"></a>UART_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Handler &rArr; uart_rx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>ADC_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RF_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF_Handler &rArr; radio_isr &rArr; gpio_6_set
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RFTIMER_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RFTIMER_Handler &rArr; rftimer_isr &rArr; handle_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler &rArr; ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXT_GPIO8_ACTIVEHIGH_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO8_ACTIVEHIGH_Handler &rArr; ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXT_GPIO9_ACTIVELOW_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO9_ACTIVELOW_Handler &rArr; ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXT_GPIO10_ACTIVELOW</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO10_ACTIVELOW &rArr; ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAWCHIPS_STARTVAL_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RAWCHIPS_STARTVAL_Handler &rArr; rawchips_startval_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_startval_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAWCHIPS_32_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RAWCHIPS_32_Handler &rArr; rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXT_OPTICAL_IRQ_IN_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OPTICAL_SFD_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = OPTICAL_SFD_Handler &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cm0dsasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[152]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[54]"></a>uart_out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in
</UL>

<P><STRONG><a name="[53]"></a>uart_in</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[1b]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in
</UL>

<P><STRONG><a name="[56]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[37]"></a>_sys_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[57]"></a>optical_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, optical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = optical_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[5b]"></a>optical_getCalibrationFinshed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, optical.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[5a]"></a>optical_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, optical.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[43]"></a>perform_calibration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, optical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = perform_calibration &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_enable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_getCalibrationFinshed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>optical_32_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, optical.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_OPTICAL_IRQ_IN_Handler
</UL>

<P><STRONG><a name="[52]"></a>optical_sfd_isr</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, optical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_superfine
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_fine
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_coarse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_fine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_coarse
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_fine
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_coarse
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_superfine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_fine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_coarse
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_fine
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_coarse
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_clk_target
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_fine
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_coarse
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPTICAL_SFD_Handler
</UL>

<P><STRONG><a name="[76]"></a>radio_txEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[70]"></a>radio_loadPacket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[72]"></a>radio_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>

<P><STRONG><a name="[5c]"></a>radio_rfOff</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = radio_rfOff
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_build_channel_table
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_tx_radio
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_timer_radio
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[73]"></a>radio_txNow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_timer_radio
</UL>

<P><STRONG><a name="[15]"></a>cb_timer_radio</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cb_timer_radio &rArr; radio_rfOff
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txNow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>send_packet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_set_callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_readCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_loadPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_txEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_rx_tx
</UL>

<P><STRONG><a name="[7a]"></a>radio_rxNow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
</UL>

<P><STRONG><a name="[59]"></a>radio_rxEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[79]"></a>receive_packet_length</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_set_callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_readCounter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_rx_tx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[7b]"></a>receive_packet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
</UL>

<P><STRONG><a name="[16]"></a>cb_startFrame_tx_radio</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>cb_endFrame_tx_radio</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cb_endFrame_tx_radio &rArr; radio_rfOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>cb_startFrame_rx_radio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>radio_getLQIchipErrors</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
</UL>

<P><STRONG><a name="[7c]"></a>radio_getIFestimate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_getIFestimate
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IF_estimate
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
</UL>

<P><STRONG><a name="[82]"></a>radio_getCrcOk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
</UL>

<P><STRONG><a name="[7e]"></a>radio_getReceivedFrame</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_getReceivedFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_RSSI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LQI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
</UL>

<P><STRONG><a name="[19]"></a>cb_endFrame_rx_radio</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cb_endFrame_rx_radio &rArr; radio_getReceivedFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getCrcOk
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getIFestimate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getLQIchipErrors
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>repeat_rx_tx</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1a]"></a>default_radio_rx_cb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = default_radio_rx_cb &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>radio_setRxCb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[8a]"></a>radio_setEndFrameRxCb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[89]"></a>radio_setStartFrameRxCb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[88]"></a>radio_setEndFrameTxCb</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[87]"></a>radio_setStartFrameTxCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[86]"></a>radio_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartFrameTxCb
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setEndFrameTxCb
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartFrameRxCb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setEndFrameRxCb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setRxCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[8c]"></a>setFrequencyRX</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[8d]"></a>setFrequencyTX</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[8e]"></a>radio_setFrequency</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
</UL>

<P><STRONG><a name="[17a]"></a>radio_rfOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>radio_frequency_housekeeping</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_fine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_coarse
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_fine
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_coarse
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[17b]"></a>radio_enable_interrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>radio_disable_interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>radio_get_cdr_tau_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>build_RX_channel_table</STRONG> (Thumb, 234 bytes, Stack size 160 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_build_channel_table
</UL>

<P><STRONG><a name="[93]"></a>build_TX_channel_table</STRONG> (Thumb, 292 bytes, Stack size 224 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_build_channel_table
</UL>

<P><STRONG><a name="[95]"></a>radio_build_channel_table</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, radio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_TX_channel_table
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_RX_channel_table
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOff
</UL>

<P><STRONG><a name="[49]"></a>radio_isr</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = radio_isr &rArr; gpio_6_set
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_6_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_6_clr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_2_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_2_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Handler
</UL>

<P><STRONG><a name="[50]"></a>rawchips_32_isr</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_32_Handler
</UL>

<P><STRONG><a name="[4f]"></a>rawchips_startval_isr</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rawchips_startval_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_STARTVAL_Handler
</UL>

<P><STRONG><a name="[48]"></a>adc_isr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[3e]"></a>adc_config</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_config &rArr; adc_set_const_gm_tuning_code_asc_bits &rArr; adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_const_gm_tuning_code_asc_bits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_bandgap_refernce_tuning_code_asc_bits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_settling_time_asc_bits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_pga_gain_asc_bits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>adc_enable_interrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = adc_enable_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>adc_disable_interrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a3]"></a>adc_trigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_output
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_rftimer_callback
</UL>

<P><STRONG><a name="[134]"></a>adc_output_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[136]"></a>adc_output_reset_valid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[135]"></a>adc_peek_output</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[a2]"></a>adc_read_output</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_average_output
</UL>

<P><STRONG><a name="[a4]"></a>adc_average_output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_output
</UL>

<P><STRONG><a name="[a6]"></a>gpio_set_high</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high_z
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_15_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_14_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_13_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_12_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_11_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_10_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_9_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_8_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_7_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_5_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_4_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_3_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_1_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_0_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_6_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_2_set
</UL>

<P><STRONG><a name="[a8]"></a>gpio_set_low</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_low
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_15_clr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_14_clr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_13_clr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_12_clr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_11_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_10_clr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_9_clr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_8_clr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_7_clr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_5_clr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_4_clr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_3_clr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_1_clr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_0_clr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_6_clr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_2_clr
</UL>

<P><STRONG><a name="[aa]"></a>gpio_toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_15_toggle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_14_toggle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_13_toggle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_12_toggle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_11_toggle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_10_toggle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_9_toggle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_8_toggle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_7_toggle
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_6_toggle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_5_toggle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_4_toggle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_3_toggle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_2_toggle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_1_toggle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_0_toggle
</UL>

<P><STRONG><a name="[17e]"></a>gpio_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>gpio_0_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[a7]"></a>gpio_0_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[a9]"></a>gpio_0_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[ab]"></a>gpio_1_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[ac]"></a>gpio_1_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[ad]"></a>gpio_1_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[98]"></a>gpio_2_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_2_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[9a]"></a>gpio_2_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_2_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[ae]"></a>gpio_2_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[af]"></a>gpio_3_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[b0]"></a>gpio_3_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[b1]"></a>gpio_3_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[b2]"></a>gpio_4_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[b3]"></a>gpio_4_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[b4]"></a>gpio_4_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[b5]"></a>gpio_5_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[b6]"></a>gpio_5_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[b7]"></a>gpio_5_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[99]"></a>gpio_6_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_6_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[9b]"></a>gpio_6_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_6_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[b8]"></a>gpio_6_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[b9]"></a>gpio_7_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[ba]"></a>gpio_7_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[bb]"></a>gpio_7_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[bc]"></a>gpio_8_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[bd]"></a>gpio_8_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[be]"></a>gpio_8_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[bf]"></a>gpio_9_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[c0]"></a>gpio_9_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[c1]"></a>gpio_9_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[c2]"></a>gpio_10_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[c3]"></a>gpio_10_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[c4]"></a>gpio_10_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[c5]"></a>gpio_11_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[c6]"></a>gpio_11_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[c7]"></a>gpio_11_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[c8]"></a>gpio_12_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[c9]"></a>gpio_12_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[ca]"></a>gpio_12_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[cb]"></a>gpio_13_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[cc]"></a>gpio_13_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[cd]"></a>gpio_13_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[ce]"></a>gpio_14_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[cf]"></a>gpio_14_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[d0]"></a>gpio_14_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[d1]"></a>gpio_15_set</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>

<P><STRONG><a name="[d2]"></a>gpio_15_clr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>

<P><STRONG><a name="[d3]"></a>gpio_15_toggle</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[4b]"></a>ext_gpio3_activehigh_debounced_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler
</UL>

<P><STRONG><a name="[4c]"></a>ext_gpio8_activehigh_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO8_ACTIVEHIGH_Handler
</UL>

<P><STRONG><a name="[4d]"></a>ext_gpio9_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO9_ACTIVELOW_Handler
</UL>

<P><STRONG><a name="[4e]"></a>ext_gpio10_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO10_ACTIVELOW
</UL>

<P><STRONG><a name="[d8]"></a>uart_tx_isr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[d4]"></a>uart_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_isr
</UL>

<P><STRONG><a name="[47]"></a>uart_rx_isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[17f]"></a>uart_set_tx_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>uart_set_rx_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>uart_enable_interrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d6]"></a>uart_disable_interrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[181]"></a>uart_set_cts</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>uart_write</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_isr
</UL>

<P><STRONG><a name="[d9]"></a>rftimer_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rftimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[3a]"></a>rftimer_set_callback_by_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rftimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_set_callback
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>rftimer_set_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rftimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_set_callback_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[3b]"></a>rftimer_enable_interrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rftimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn_by_id
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>rftimer_clear_interrupts_by_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rftimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_clear_interrupts
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts_by_id
</UL>

<P><STRONG><a name="[3c]"></a>rftimer_enable_interrupts_by_id</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_clear_interrupts_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn_by_id
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>rftimer_setCompareIn_by_id</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rftimer_setCompareIn_by_id &rArr; rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts_by_id
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn
</UL>

<P><STRONG><a name="[78]"></a>rftimer_setCompareIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rftimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[77]"></a>rftimer_readCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rftimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet_length
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[182]"></a>rftimer_disable_interrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rftimer.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>rftimer_disable_interrupts_by_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rftimer.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>rftimer_clear_interrupts</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, rftimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_clear_interrupts_by_id
</UL>

<P><STRONG><a name="[184]"></a>rftimer_set_repeat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rftimer.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>delay_milliseconds_asynchronous</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_milliseconds_asynchronous &rArr; rftimer_setCompareIn_by_id &rArr; rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_setCompareIn_by_id
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_readCounter
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts_by_id
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_enable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_synchronous
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_rftimer_callback
</UL>

<P><STRONG><a name="[de]"></a>delay_milliseconds_synchronous</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_milliseconds_synchronous &rArr; delay_milliseconds_asynchronous &rArr; rftimer_setCompareIn_by_id &rArr; rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_excite
</UL>

<P><STRONG><a name="[df]"></a>handle_interrupt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = handle_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_isr
</UL>

<P><STRONG><a name="[4a]"></a>rftimer_isr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rftimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rftimer_isr &rArr; handle_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTIMER_Handler
</UL>

<P><STRONG><a name="[e0]"></a>scm3c_hw_interface_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scm3c_hw_interface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[5d]"></a>scm3c_hw_interface_get_HF_CLOCK_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[5e]"></a>scm3c_hw_interface_get_HF_CLOCK_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[5f]"></a>scm3c_hw_interface_get_RC2M_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[60]"></a>scm3c_hw_interface_get_RC2M_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[61]"></a>scm3c_hw_interface_get_RC2M_superfine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[62]"></a>scm3c_hw_interface_get_IF_clk_target</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[63]"></a>scm3c_hw_interface_get_IF_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[64]"></a>scm3c_hw_interface_get_IF_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[67]"></a>scm3c_hw_interface_set_HF_CLOCK_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[66]"></a>scm3c_hw_interface_set_HF_CLOCK_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[6a]"></a>scm3c_hw_interface_set_RC2M_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[6b]"></a>scm3c_hw_interface_set_RC2M_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[6c]"></a>scm3c_hw_interface_set_RC2M_superfine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[185]"></a>scm3c_hw_interface_set_IF_clk_target</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>scm3c_hw_interface_set_IF_coarse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[6f]"></a>scm3c_hw_interface_set_IF_fine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[e1]"></a>scm3c_hw_interface_set_asc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[e3]"></a>reverse</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
</UL>

<P><STRONG><a name="[e2]"></a>crc32c</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc32c
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
</UL>

<P><STRONG><a name="[42]"></a>crc_check</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = crc_check &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>flipChar</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>

<P><STRONG><a name="[96]"></a>clear_asc_bit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_early
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_clkdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zcc_demod_threshold
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ALWAYSON_LDO_voltage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AUX_LDO_voltage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VDDD_LDO_voltage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_build_channel_table
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
</UL>

<P><STRONG><a name="[97]"></a>set_asc_bit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_early
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_clkdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zcc_demod_threshold
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ALWAYSON_LDO_voltage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AUX_LDO_voltage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VDDD_LDO_voltage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_build_channel_table
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
</UL>

<P><STRONG><a name="[44]"></a>GPO_control</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPO_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>GPI_control</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPI_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[e5]"></a>GPO_enables</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPO_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[e6]"></a>GPI_enables</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[e7]"></a>init_ldo_control</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ldo_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[e8]"></a>sram_test</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e9]"></a>set_IF_LDO_voltage</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_IF_LDO_voltage &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[ea]"></a>set_VDDD_LDO_voltage</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>

<P><STRONG><a name="[eb]"></a>set_AUX_LDO_voltage</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>

<P><STRONG><a name="[ec]"></a>set_ALWAYSON_LDO_voltage</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>

<P><STRONG><a name="[ed]"></a>set_zcc_demod_threshold</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
</UL>

<P><STRONG><a name="[ee]"></a>set_IF_ZCC_clkdiv</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
</UL>

<P><STRONG><a name="[ef]"></a>set_IF_ZCC_early</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
</UL>

<P><STRONG><a name="[f0]"></a>set_IF_stg3gm_ASC</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_stg3gm_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[f1]"></a>set_IF_comparator_trim_I</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_I &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_ZCC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[f2]"></a>set_IF_comparator_trim_Q</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_Q &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[f3]"></a>set_IF_gain_ASC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_gain_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[f4]"></a>radio_init_rx_MF</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_init_rx_MF &rArr; set_IF_gain_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[f5]"></a>radio_init_rx_ZCC</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_early
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_ZCC_clkdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_zcc_demod_threshold
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>

<P><STRONG><a name="[f9]"></a>set_LO_supply</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LO_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[f8]"></a>set_PA_supply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[f7]"></a>set_LC_current</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LC_current
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[f6]"></a>radio_init_tx</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = radio_init_tx &rArr; set_LC_current
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LC_current
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PA_supply
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LO_supply
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[fd]"></a>divProgram</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = divProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[fc]"></a>prescaler</STRONG> (Thumb, 574 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[fb]"></a>set_DIV_supply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_DIV_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[fa]"></a>radio_init_divider</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_init_divider &rArr; divProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DIV_supply
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prescaler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divProgram
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[186]"></a>read_counters_3B</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>read_IF_estimate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getIFestimate
</UL>

<P><STRONG><a name="[80]"></a>read_LQI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[7f]"></a>read_RSSI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[6d]"></a>set_IF_clock_frequency</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_IF_clock_frequency &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[65]"></a>set_sys_clk_secondary_freq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_sys_clk_secondary_freq &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[41]"></a>analog_scan_chain_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>analog_scan_chain_write</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analog_scan_chain_write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>LC_FREQCHANGE</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flipChar
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_rx_tx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
</UL>

<P><STRONG><a name="[68]"></a>LC_monotonic</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LC_monotonic &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_TX_channel_table
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_RX_channel_table
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[ff]"></a>flip_lsb8</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
</UL>

<P><STRONG><a name="[69]"></a>set_2M_RC_frequency</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_2M_RC_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_lsb8
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_2M_DAC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[39]"></a>initialize_mote</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = initialize_mote &rArr; LC_monotonic &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>estimate_temperature_2M_32k</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[101]"></a>initialize_2M_DAC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, scm3c_hw_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
</UL>

<P><STRONG><a name="[187]"></a>read_counters</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>update_PN31_byte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>disable_polyphase_ASC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>enable_polyphase_ASC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>disable_div_power_ASC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>enable_div_power_ASC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>ext_clk_ble_ASC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>int_clk_ble_ASC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>enable_1mhz_ble_ASC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>disable_1mhz_ble_ASC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scm3c_hw_interface.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>matrix_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrix_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_transpose
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_copy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_add
</UL>

<P><STRONG><a name="[191]"></a>matrix_num_rows</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, matrix.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>matrix_num_columns</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, matrix.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>matrix_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrix_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_index
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_column
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_transpose
</UL>

<P><STRONG><a name="[106]"></a>matrix_set</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrix_set
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_index
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_column
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_transpose
</UL>

<P><STRONG><a name="[107]"></a>matrix_add</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, matrix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
</UL>

<P><STRONG><a name="[109]"></a>matrix_multiply</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = matrix_multiply &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_index
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
</UL>

<P><STRONG><a name="[10b]"></a>matrix_copy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, matrix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[10c]"></a>matrix_transpose</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, matrix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>

<P><STRONG><a name="[127]"></a>svd_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
</UL>

<P><STRONG><a name="[110]"></a>cross_product</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cross_product &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
</UL>

<P><STRONG><a name="[113]"></a>identity_subtract_outer_product</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = identity_subtract_outer_product &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
</UL>

<P><STRONG><a name="[114]"></a>matrix_get_column</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = matrix_get_column &rArr; matrix_set
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
</UL>

<P><STRONG><a name="[115]"></a>euclidean_norm</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
</UL>

<P><STRONG><a name="[118]"></a>normalize</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
</UL>

<P><STRONG><a name="[11a]"></a>gradient_ascent</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
</UL>

<P><STRONG><a name="[11b]"></a>svd_calculate_v</STRONG> (Thumb, 312 bytes, Stack size 104 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_column
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
</UL>

<P><STRONG><a name="[122]"></a>eigenvalues</STRONG> (Thumb, 400 bytes, Stack size 112 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = eigenvalues &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
</UL>

<P><STRONG><a name="[124]"></a>form_data_matrix</STRONG> (Thumb, 1732 bytes, Stack size 112 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = form_data_matrix &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
</UL>

<P><STRONG><a name="[125]"></a>form_computing_matrix</STRONG> (Thumb, 416 bytes, Stack size 96 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = form_computing_matrix &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
</UL>

<P><STRONG><a name="[126]"></a>matrix_pencil_method_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_estimate
</UL>

<P><STRONG><a name="[128]"></a>exp</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = exp &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
</UL>

<P><STRONG><a name="[129]"></a>ln</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ln &rArr; exp &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_absolute_value
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_subtract
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
</UL>

<P><STRONG><a name="[12b]"></a>matrix_pencil_method_get_time_constant</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = matrix_pencil_method_get_time_constant &rArr; eigenvalues &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_absolute_value
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_estimate
</UL>

<P><STRONG><a name="[45]"></a>sensor_resistive_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sensor_resistive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sensor_resistive_init &rArr; sensor_capacitor_set_next_mask &rArr; sensor_capacitor_set_gpios &rArr; sensor_gpio_set_low &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_next_mask
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>sensor_resistive_measure</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sensor_resistive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = sensor_resistive_measure &rArr; time_constant_estimate &rArr; matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_estimate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>sensor_resistive_rftimer_callback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sensor_resistive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sensor_resistive_rftimer_callback &rArr; delay_milliseconds_asynchronous &rArr; rftimer_setCompareIn_by_id &rArr; rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_callback
</UL>

<P><STRONG><a name="[132]"></a>time_constant_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time_constant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_constant_init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[137]"></a>time_constant_add_sample</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, time_constant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_constant_add_sample &rArr; adc_msb_disambiguate
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_msb_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_msb_get_disambiguated_sample
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_msb_disambiguate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_to_buffer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[138]"></a>time_constant_has_sufficient_samples</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, time_constant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[130]"></a>time_constant_estimate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, time_constant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = time_constant_estimate &rArr; matrix_pencil_method_init &rArr; svd_calculate_v &rArr; gradient_ascent &rArr; normalize &rArr; euclidean_norm &rArr; fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure
</UL>

<P><STRONG><a name="[139]"></a>adc_msb_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc_msb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
</UL>

<P><STRONG><a name="[13c]"></a>adc_msb_disambiguate</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, adc_msb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_msb_disambiguate
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
</UL>

<P><STRONG><a name="[13a]"></a>adc_msb_get_disambiguated_sample</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc_msb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
</UL>

<P><STRONG><a name="[12d]"></a>sensor_capacitor_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensor_capacitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensor_capacitor_init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_init
</UL>

<P><STRONG><a name="[13e]"></a>sensor_capacitor_set_gpios</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sensor_capacitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sensor_capacitor_set_gpios &rArr; sensor_gpio_set_low &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_low
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high_z
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_next_mask
</UL>

<P><STRONG><a name="[12e]"></a>sensor_capacitor_set_next_mask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sensor_capacitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sensor_capacitor_set_next_mask &rArr; sensor_capacitor_set_gpios &rArr; sensor_gpio_set_low &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_gpios
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_init
</UL>

<P><STRONG><a name="[12c]"></a>sensor_gpio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_gpio_init &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_init
</UL>

<P><STRONG><a name="[142]"></a>sensor_gpio_set_high</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_gpio_set_high &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_excite
</UL>

<P><STRONG><a name="[13f]"></a>sensor_gpio_set_low</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_gpio_set_low &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_low
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_gpios
</UL>

<P><STRONG><a name="[140]"></a>sensor_gpio_set_high_z</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_gpio_set_high_z &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_gpios
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_excite
</UL>

<P><STRONG><a name="[133]"></a>sensor_gpio_excite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sensor_gpio_excite &rArr; sensor_gpio_set_high &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high_z
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_synchronous
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
</UL>

<P><STRONG><a name="[193]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>

<P><STRONG><a name="[194]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>

<P><STRONG><a name="[195]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_ldivmod</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
</UL>

<P><STRONG><a name="[196]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sram_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable_interrupt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable_interrupt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_interrupt
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_radio_rx_cb
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_rx_tx
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_interrupt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2c]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[2a]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[197]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__printf</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, __printf_ss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_loadPacket
</UL>

<P><STRONG><a name="[198]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[14c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame_rx_radio
</UL>

<P><STRONG><a name="[199]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rftimer_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_TX_channel_table
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_RX_channel_table
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_capacitor_set_next_mask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_temperature_2M_32k
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_TX_channel_table
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_RX_channel_table
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_frequency_housekeeping
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
</UL>

<P><STRONG><a name="[19d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[144]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[147]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[151]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[33]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sensor_resistive.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure_run
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_rftimer_callback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13]"></a>rftimer_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sensor_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rftimer_callback &rArr; sensor_resistive_rftimer_callback &rArr; delay_milliseconds_asynchronous &rArr; rftimer_setCompareIn_by_id &rArr; rftimer_enable_interrupts_by_id
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_rftimer_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_adc.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>adc_set_asc_bit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_const_gm_tuning_code_asc_bits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_bandgap_refernce_tuning_code_asc_bits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_settling_time_asc_bits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_pga_gain_asc_bits
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[9d]"></a>adc_set_pga_gain_asc_bits</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_set_pga_gain_asc_bits &rArr; adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[9e]"></a>adc_set_settling_time_asc_bits</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_set_settling_time_asc_bits &rArr; adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[9f]"></a>adc_set_bandgap_refernce_tuning_code_asc_bits</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_set_bandgap_refernce_tuning_code_asc_bits &rArr; adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[a0]"></a>adc_set_const_gm_tuning_code_asc_bits</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_set_const_gm_tuning_code_asc_bits &rArr; adc_set_asc_bit &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[108]"></a>fixed_point_add</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fixed_point_add
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_add
</UL>

<P><STRONG><a name="[10a]"></a>fixed_point_multiply</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
</UL>

<P><STRONG><a name="[104]"></a>matrix_validate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, matrix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>

<P><STRONG><a name="[105]"></a>matrix_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, matrix.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_multiply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get
</UL>

<P><STRONG><a name="[10f]"></a>fixed_point_multiply</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[111]"></a>fixed_point_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svd_3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svd_calculate_v
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_get_column
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[116]"></a>fixed_point_add</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fixed_point_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[112]"></a>fixed_point_subtract</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fixed_point_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identity_subtract_outer_product
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cross_product
</UL>

<P><STRONG><a name="[119]"></a>fixed_point_divide</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fixed_point_divide &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient_ascent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[117]"></a>fixed_point_square_root</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, svd_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euclidean_norm
</UL>

<P><STRONG><a name="[11d]"></a>fixed_point_multiply</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[11e]"></a>fixed_point_square_root</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fixed_point_square_root &rArr; fixed_point_multiply &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_divide
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
</UL>

<P><STRONG><a name="[11f]"></a>fixed_point_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_absolute_value
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[121]"></a>fixed_point_add</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fixed_point_add
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[123]"></a>fixed_point_subtract</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fixed_point_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_data_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
</UL>

<P><STRONG><a name="[120]"></a>fixed_point_divide</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fixed_point_divide &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_computing_matrix
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eigenvalues
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_square_root
</UL>

<P><STRONG><a name="[12a]"></a>fixed_point_absolute_value</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, matrix_pencil_method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fixed_point_absolute_value
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_pencil_method_get_time_constant
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ln
</UL>

<P><STRONG><a name="[12f]"></a>sensor_resistive_measure_run</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sensor_resistive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sensor_resistive_measure_run &rArr; sensor_gpio_excite &rArr; sensor_gpio_set_high &rArr; sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_has_sufficient_samples
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_excite
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_milliseconds_asynchronous
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_peek_output
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_output_reset_valid
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_output_valid
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_resistive_measure
</UL>

<P><STRONG><a name="[13d]"></a>fixed_point_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time_constant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_estimate
</UL>

<P><STRONG><a name="[13b]"></a>time_constant_add_to_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, time_constant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_constant_add_sample
</UL>

<P><STRONG><a name="[141]"></a>sensor_gpio_set_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sensor_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sensor_gpio_set_enable &rArr; GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_low
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_set_high_z
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_gpio_init
</UL>

<P><STRONG><a name="[1c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[154]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[150]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[14f]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[145]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
